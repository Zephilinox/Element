# Matrix definitions
#
# In Element, matrices are stored in column-major form.
# In practice all this means is that we construct them via column vectors.
# They can still be thought of as usual matrices which should be indexed as
#       M_12 = first row, second column.

struct Matrix2x2(xCol:Vector2, yCol:Vector2)
{
    # Factories
    identity:Matrix2x2 = Matrix2x2(Vector2(1, 0), Vector2(0, 1))
    fromDiagonal(diag:Vector2):Matrix2x2
    {
        # Create a diagonal matrix from the specified vector
        return = Matrix2x2(Vector2(diag.x, 0), Vector2(0, diag.y))
    }

    # Matrix Properties
    xRow(m:Matrix2x2):Vector2 = Vector2(m.xCol.x, m.yCol.x)
    yRow(m:Matrix2x2):Vector2 = Vector2(m.xCol.y, m.yCol.y)
    diagonal(m:Matrix2x2):Vector2 = Vector2(m.xCol.x, m.yCol.y)

    transpose(m:Matrix2x2):Matrix2x2 = Matrix2x2(m.xRow, m.yRow)

    determinant(m:Matrix2x2):Num
    {
        return = m.xCol.x.mul(m.yCol.y).sub(m.xCol.y.mul(m.yCol.x))
    }

    # Operations
    mul(a:Matrix2x2, b:Matrix2x2):Matrix2x2
    {
        m_00 = a.xRow.dot(b.xCol)
        m_01 = a.xRow.dot(b.yCol)
        m_10 = a.yRow.dot(b.xCol)
        m_11 = a.yRow.dot(b.yCol)
        mxCol = Vector2(m_00, m_10)
        myCol = Vector2(m_01, m_11)
        return = Matrix2x2(mxCol, myCol)
    }

    mulVec(m:Matrix2x2, v:Vector2):Vector2
    {
        return = Vector2(m.xRow.dot(v), m.yRow.dot(v))
    }
}



#column-major 3x3 coordinate matrix for representing linear transformations - INCOMPLETE
struct Matrix3x3(x:Vector3, y:Vector3, z:Vector3)
{
    xRow(a:Matrix3x3) = Vector3(a.x.x, a.y.x, a.z.x)
    yRow(a:Matrix3x3) = Vector3(a.x.y, a.y.y, a.z.y)
    zRow(a:Matrix3x3) = Vector3(a.x.z, a.y.z, a.z.z)
    
    transpose(m:Matrix3x3):Matrix3x3 = Matrix3x3(m.xRow, m.yRow, m.zRow)
      
    #UNTESTED
    determinant(m:Matrix3x3):Num
    {
        a = m.x.x.mul(m.y.y.mul(m.z.z).sub(m.y.z.mul(m.z.y)))
        b = m.y.x.mul(m.x.x.mul(m.z.z).sub(m.x.z.mul(m.z.x)))
        c = m.z.x.mul(m.x.x.mul(m.y.y).sub(m.x.y.mul(m.x.y)))
        
        return = a.sub(b).add(c)
    } 
}


#column-major 4x4 homogeneous coordinate matrix for representing affine transformations
struct Matrix4x4(x:Vector4, y:Vector4, z:Vector4, w:Vector4)
{
     identity = 
         Matrix4x4(
            Vector4(1, 0, 0, 0),
            Vector4(0, 1, 0, 0),
            Vector4(0, 0, 1, 0),
            Vector4(0, 0, 0, 1))
               
    xRow(m:Matrix4x4) = Vector4(m.x.x, m.y.x, m.z.x, m.w.x)
    yRow(m:Matrix4x4) = Vector4(m.x.y, m.y.y, m.z.y, m.w.y)
    zRow(m:Matrix4x4) = Vector4(m.x.z, m.y.z, m.z.z, m.w.z)
    wRow(m:Matrix4x4) = Vector4(m.x.w, m.y.w, m.z.w, m.w.w)
       
    transpose(m:Matrix4x4):Matrix4x4 = Matrix4x4(m.xRow, m.yRow, m.zRow, m.wRow)
    
    position(m:Matrix4x4):Vector3 = Vector3(m.w.x, m.w.y, m.w.z)
    
    rotation(m:Matrix4x4):Matrix3x3 = Matrix3x3(
                                                Vector3(m.x.x, m.y.x, m.z.x),
                                                Vector3(m.x.y, m.y.y, m.z.y),
                                                Vector3(m.x.z, m.y.z, m.z.z))
    
    #this makes the assumption that Matrix4x4 is affine
    hasInverse(a:Matrix4x4):Bool = a.rotation_submatrix.determinant.neq(0)

    translation(translation:Vector3):Matrix4x4 = 
        Matrix4x4(
            Vector4(1, 0, 0, 0),
            Vector4(0, 1, 0, 0),
            Vector4(0, 0, 1, 0),
            Vector4(translation.x, translation.y, translation.z, 1))
            
    fromAxisAngle(axis:Vector3, angle:Num):Matrix4x4 
    { 
        c = Num.cos(angle)
        s = Num.sin(angle)
        t = 1.sub(c)
        a = axis.normalise

        m_00 = t.mul(a.x).mul(a.x).add(c)
        m_11 = t.mul(a.y).mul(a.y).add(c)
        m_22 = t.mul(a.z).mul(a.z).add(c)
        
        row_0_tmp1 = a.x.mul(a.y).mul(t)
        row_0_tmp2 = a.z.mul(s)
        m_10 = row_0_tmp1.add(row_0_tmp2)
        m_01 = row_0_tmp1.sub(row_0_tmp2)
        
        row_1_tmp1 = a.x.mul(a.z).mul(t)
        row_1_tmp2 = a.y.mul(s)
        m_20 = row_1_tmp1.sub(row_1_tmp2)
        m_02 = row_1_tmp1.add(row_1_tmp2)
        
        row_2_tmp1 = a.y.mul(a.z).mul(t)
        row_2_tmp2 = a.x.mul(s)
        m_21 = row_2_tmp1.add(row_2_tmp2)
        m_12 = row_2_tmp1.sub(row_2_tmp2)

        return = Matrix4x4(
                           Vector4(m_00, m_10, m_20, 0),
                           Vector4(m_01, m_11, m_21, 0),
                           Vector4(m_02, m_12, m_22, 0),
                           Vector4(0,    0,    0,    1))                       
    }   
    
    transform(this:Matrix4x4, column_vector:Vector4):Vector4
    {
        multiply(matrixRow_vector:Vector4):Num = matrixRow_vector.dot(column_vector)
        x = multiply(this.xRow)
        y = multiply(this.yRow)
        z = multiply(this.zRow)
        w = multiply(this.wRow)
        return = Vector4(x, y, z, w)
        
        #TODO: memberwise this later
        #return = memberwise(multiply, Matrix4x4.transpose(matrix))
    }   
    
    multiply(a:Matrix4x4, b:Matrix4x4):Matrix4x4
    {
        x_component = Vector4(a.xRow.dot(b.x), a.yRow.dot(b.x), a.zRow.dot(b.x), a.wRow.dot(b.w))
        y_component = Vector4(a.xRow.dot(b.y), a.yRow.dot(b.y), a.zRow.dot(b.y), a.wRow.dot(b.w))
        z_component = Vector4(a.xRow.dot(b.z), a.yRow.dot(b.z), a.zRow.dot(b.z), a.wRow.dot(b.w))
        w_component = Vector4(a.xRow.dot(b.w), a.yRow.dot(b.w), a.zRow.dot(b.w), a.wRow.dot(b.w))
    
        return = Matrix4x4(x_component, y_component, z_component, w_component)
    }
    
    multiplyScalar(a:Matrix4x4, b:Num):Matrix4x4
    {
        x_component = a.x.mul(b)
        y_component = a.y.mul(b)
        z_component = a.z.mul(b)
        w_component = a.w.mul(b)
    
        return = Matrix4x4(x_component, y_component, z_component, w_component)
    }
    
    add(a:Matrix4x4, b:Matrix4x4):Matrix4x4
    {
        return = Matrix4x4(
            Vector4(a.x.add(b.x)),
            Vector4(a.y.add(b.y)),
            Vector4(a.z.add(b.z)),
            Vector4(a.w.add(b.w)))
    }
}